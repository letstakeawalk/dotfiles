-- ts_ls = {
--     handlers = {
--         -- filter Hint and Info diagnostics
--         ["textDocument/publishDiagnostics"] = function(err, result, ctx)
--             result.diagnostics = vim.tbl_filter(function(diag)
--                 return diag.severity < vim.diagnostic.severity.INFO
--             end, result.diagnostics)
--             vim.lsp.diagnostic.on_publish_diagnostics(err, result, ctx)
--         end,
--     },
--     settings = {
--         typescript = {
--             -- format = { semicolons = "insert" },
--             inlayHints = {
--                 includeInlayParameterNameHints = "none", -- "none" | "literal" | "all"
--                 includeInlayParameterNameHintsWhenArgumentMatchesName = false,
--                 includeInlayFunctionParameterTypeHints = false,
--                 includeInlayVariableTypeHints = false,
--                 includeInlayVariableTypeHintsWhenTypeMatchesName = false,
--                 includeInlayPropertyDeclarationTypeHints = false,
--                 includeInlayFunctionLikeReturnTypeHints = true,
--                 includeInlayEnumMemberValueHints = false,
--             },
--         },
--         javascript = {
--             -- format = { semicolons = "insert" },
--             inlayHints = {
--                 includeInlayParameterNameHints = "none",
--                 includeInlayParameterNameHintsWhenArgumentMatchesName = false,
--                 includeInlayFunctionParameterTypeHints = false,
--                 includeInlayVariableTypeHints = false,
--                 includeInlayVariableTypeHintsWhenTypeMatchesName = false,
--                 includeInlayPropertyDeclarationTypeHints = false,
--                 includeInlayFunctionLikeReturnTypeHints = true,
--                 includeInlayEnumMemberValueHints = false,
--             },
--         },
--     },
--     on_attach = function(_, bufnr)
--         local organize_imports = function()
--             vim.lsp.buf.execute_command({
--                 command = "_typescript.organizeImports",
--                 arguments = { vim.api.nvim_buf_get_name(0) },
--                 title = "",
--             })
--         end
--         vim.api.nvim_create_user_command("OrganizeImports", organize_imports, { desc = "Organize Imports" })
--         vim.keymap.set("n", "<leader>ro", "<cmd>OrganizeImports<cr>", { buffer = bufnr, desc = "Organize Imports" })
--     end,
-- }

return {}
